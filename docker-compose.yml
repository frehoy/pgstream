# docker-compose.yml

version: '3'
services:
  rest:
    image: postgrest/postgrest
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://authenticator:authenticator_password@db:5432/track
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: anon
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_JWT_SECRET: AkCvuTDbDqiyYn3cAStDveMAGUuP8UZp
    depends_on:
      db:
        condition: service_healthy
  db:
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U track"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: track
      POSTGRES_USER: track
      POSTGRES_PASSWORD: password
    volumes:
      - "pgdata:/var/lib/postgresql/data"
      - "./schema/:/docker-entrypoint-initdb.d/"
      - "./postgresql.conf:/etc/postgresql/postgresql.conf"
  bench:
    # Put bench in its own profile to prevent it running on `docker compose up`
    profiles: ["bench"] 
    image: alpine/bombardier
    volumes:
      - "./data.json:/data.json"
    command: '--header="Content-Type: application/json" --header="Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYXBpX3VzZXIifQ.W9Fo49rxMbSVnhdK1lzjMwCgf_1MZCPy9GNbt9j10ds" --method=POST --body-file="/data.json"  http://rest:3000/events'
volumes:
  pgdata: